using BalsaCore;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using BalsaAddons.Modules;
using CfgFields;

namespace JDSATorqueModule
{
    public class JDSATorqueModule : PartModule

    {
        [SerializeField]
        [CfgField(CfgContext.Config, null, false, null)]
        public float rotTorque = 1000;
        [SerializeField]
        [CfgField(CfgContext.Config, null, false, null)]
        public Vector3 axis;
        [SerializeField]
        [CfgField(CfgContext.Config, null, false, null)]
        public float dampenFactor = 0.8f;
        [SerializeField]
        [CfgField(CfgContext.Config, null, false, null)]
        public float adjustFactor = 1000f;
        [SerializeField]
        [CfgField(CfgContext.Config, null, false, null)]
        public float angle;
        [SerializeField]
        [CfgField(CfgContext.Config, null, false, null)]
        public string StartUpString = "Starting JDSA Torque Systems";
        [SerializeField]
        [CfgField(CfgContext.Config, null, false, null)]
        public Rigidbody rb;
        public Quaternion StartQuarternion;

        protected override string GetModuleName() => "JDSATorqueModule.JDSATorqueModule";


        public void OnModuleSpawn()
        {
            rb = GetComponent<Rigidbody>();
            StartQuarternion = transform.rotation;
            Debug.Log(StartUpString);
            //Debug.Log($"{Time.realtimeSinceStartup} [GyroTorquer] {text}");
        }

        protected void FixedUpdate()
        {

            float vert = InputSettings.Axis_Pitch.GetAxis();
            float horiz = InputSettings.Axis_Roll.GetAxis();
            float yawAx = InputSettings.Axis_Yaw.GetAxis();

            if (vert > 0)
            {
                transform.rotation = Quaternion.AngleAxis(rotTorque, Vector3.up);
            }
            if (vert < 0)
            {
                transform.rotation = Quaternion.AngleAxis(rotTorque, Vector3.down);
            }

            if (horiz < 0)
            {
                transform.rotation = Quaternion.AngleAxis(rotTorque, Vector3.left);
            }
            if (horiz > 0)
            {
                transform.rotation = Quaternion.AngleAxis(rotTorque, Vector3.right);
            }


            Quaternion deltaQuat = Quaternion.FromToRotation(rb.transform.up, Vector3.up);
            deltaQuat.ToAngleAxis(out angle, out axis);
            rb.AddTorque(-rb.angularVelocity * dampenFactor * Time.deltaTime, ForceMode.Acceleration);
            rb.AddTorque(axis.normalized * angle * adjustFactor * Time.deltaTime, ForceMode.Acceleration);

            Quaternion deltaQuatYaw = Quaternion.FromToRotation(rb.transform.right, Vector3.right);
            deltaQuatYaw.ToAngleAxis(out angle, out axis);
            rb.AddTorque(-rb.angularVelocity * dampenFactor * Time.deltaTime, ForceMode.Acceleration);
            rb.AddTorque(axis.normalized * angle * adjustFactor * Time.deltaTime, ForceMode.Acceleration);
        }

    }
}
